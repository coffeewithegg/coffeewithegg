name: Run Integration tests

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

jobs:
  run-e2e-tests:
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=2cpu-linux-x64
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      TURBO_SCM_BASE: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      # Figures out the version of playwright that's installed.
      # 1. Because we don't know what version npm will resolve it to
      # 2. Because we're in a workspace, we need to make sure we get the version
      #    for the root and not any children, hence the `grep`. If not using
      #    workspaces, this can be skipped.
      # The result is stored in $PLAYWRIGHT_VERSION
      # https://github.com/microsoft/playwright/issues/7249#issuecomment-2299065930
      # https://stackoverflow.com/a/33426237/24573072
      # https://github.com/actions/runner/issues/1636#issuecomment-1024531638
      - name: Detect Playwright version (Windows)
        if: runner.os == 'windows'
        run: echo "PLAYWRIGHT_VERSION=$(npm ll -p --depth=0 playwright | grep -o '@.*')" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Detect Playwright version (Linux and Mac)
        if: runner.os != 'windows'
        run: echo "PLAYWRIGHT_VERSION=$(npm ll -p --depth=0 playwright | grep -o '@.*')" >> $GITHUB_ENV

      - name: Put $HOME in env
        if: runner.os == 'windows'
        run: echo "HOME=$HOME" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Attempt to restore the correct Playwright browser binaries based on the
      # currently installed version of Playwright (The browser binary versions
      # may change with Playwright versions).
      # Note: Playwright's cache directory is hard coded because that's what it
      # says to do in the docs. There doesn't appear to be a command that prints
      # it out for us.
      - name: Cache playwright binaries
        uses: runs-on/cache@v4
        id: playwright-cache
        with:
          # see https://playwright.dev/docs/browsers#managing-browser-binaries
          path: ${{ runner.os == 'Windows' && format('{0}{1}', env.HOME, '\AppData\Local\ms-playwright') || runner.os == 'Linux' && '~/.cache/ms-playwright' || '~/Library/Caches/ms-playwright' }}
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
          # As a fallback, if the Playwright version has changed, try use the
          # most recently cached version. There's a good chance that at least one
          # of the browser binary versions haven't been updated, so Playwright can
          # skip installing that in the next step.
          # Note: When falling back to an old cache, `cache-hit` (used below)
          # will be `false`. This allows us to restore the potentially out of
          # date cache, but still let Playwright decide if it needs to download
          # new binaries or not.
          restore-keys: |
            ${{ runner.os }}-playwright-

      # If the Playwright browser binaries weren't able to be restored, we tell
      # playwright to install everything for us.
      - name: Install Playwright with dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      # If browser binaries are available we ask playwright to install os specific deps
      # For example on linux it will install ffmpeg, xvfb, and many more libs
      - name: Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Install dependencies
        run: pnpm install
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true

      - name: Build
        run: pnpm build:ci

      - name: Run tests
        run: pnpm e2e:ci
